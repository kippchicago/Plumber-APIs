packrat::init()
install.packages(c("futile.logger", "lubridate", "purrr", "stringr"))
install.packages('devtools')
devtools::install_github('almartin82/mapvizieR')
devtools::install_github('kippchicago/silounloadr')
install.packages("bigrquery")
devtools::install_github('kippchicago/silounloadr')
Sys.getenv()
gcs_auth_file <- Sys.getenv("GCS_AUTH_FILE")
gcs_auth_file
bq_project <- Sys.getenv("BQ_PROJECT")
bq_auth_file <-Sys.getenv("BQ_AUTH_FILE")
bq_project <- Sys.getenv("BQ_PROJECT")
gcs_auth_file <- Sys.getenv("GCS_AUTH_FILE")
Sys.setenv(FIRST_DAY = "2018-08-20")
first_day <- Sys.getenv("FIRST_DAY")
Sys.getenv()
readRenviron("~/.Renviron")
Sys.getenv()
bq_project <- Sys.getenv("BQ_PROJECT")
first_day <- Sys.getenv("FIRST_DAY")
library(plumber)
library(dplyr)
library(lubridate)
library(purrr)
library(stringr)
library(futile.logger)
library(mapvizieR)
library(silounloadr)
first_four_years_ago <- floor_date(ymd(first_day) - years(4), unit = "week") %>%
as.character()
first_four_years_ago
map_cdf <- silounloadr::get_nwea_map('cdf_combined_kipp_cps')
glipmse(map_cdf)
glimps(map_cdf)
glimpse(map_cdf)
cat("Detecting test term names")
test_term_names <- map_cdf %>%
select(term_name, test_start_date) %>%
filter(test_start_date >= first_four_years_ago) %>%
select(term_name) %>%
distinct() %>%
collect()
cat("Pulling MAP data by term")
get_map_by_term <- function(termname) {
map_cdf %>% filter(term_name == termname) %>% collect()
}
map_cdf_2 <- test_term_names$term_name %>%
purrr::map_df(~get_map_by_term(.))
cat("Renaming colums (janitor-style)")
names(map_cdf_2) <- str_replace_all(names(map_cdf_2), "_", "") %>% tolower()
cat("Excluding Survey only and some light munging")
map_cdf_3 <- map_cdf_2 %>%
mutate(testtype = if_else(is.na(testtype), "Survey With Goals", testtype),
testid = as.character(testid)) %>%
filter(testtype == "Survey With Goals",
growthmeasureyn == 'TRUE') %>%
mutate(teststartdate = as.character(ymd(teststartdate)),
testid = if_else(is.na(testid),
paste(studentid, measurementscale, teststartdate, testdurationminutes, sep = "_"),
testid))
map_cdf_2 <- test_term_names$term_name %>%
purrr::map_df(~get_map_by_term(.))
bigrquery::set_service_token(bq_auth_file)
bq_auth_file
bq_auth_file <-Sys.getenv("BQ_AUTH_FILE")
bigrquery::set_service_token(bq_auth_file)
bigrquery::bq_table_meta('cdf_combined_kipp_cps')
bigrquery::bq_table_meta(x = 'cdf_combined_kipp_cps')
bigrquery::bq_table_meta(map_cdf)
bq_dataset_meta()
bigrquery::bq_dataset_meta()
bigrquery::bq_dataset_meta(x = bq_project)
bq_project
map_ds <- bq_dataset(bq_project, 'nwea_map')
map_ds <- bigrquery::bq_dataset(bq_project, 'nwea_map')
bigrquery::bq_dataset_meta(map_ds)
x<-bigrquery::bq_dataset_meta(map_ds)
x$lastModifiedTime
as.POSIXct(()x$lastModifiedTime)
as.POSIXct(x$lastModifiedTime)
lubridate::as_datetime(x$lastModifiedTime)
as.POSIXct(x$lastModifiedTime)
as.POSIXt(x$lastModifiedTime)
as.POSIXt(x$lastModifiedTime)
lubridate::seconds_to_period(x$lastModifiedTime)
lubridate
as.Date(x$creationTime)
as.Date.POSIXct(x$creationTime)
as.Date.POSIXct(as.integer(x$creationTime))
x$creationTime
mdts <- x$lastModifiedTime
class(mdts) <- "POSIXct"
mdts
x
cat("Renaming colums (janitor-style)")
names(map_cdf_2) <- str_replace_all(names(map_cdf_2), "_", "") %>% tolower()
cat("Excluding Survey only and some light munging")
map_cdf_3 <- map_cdf_2 %>%
mutate(testtype = if_else(is.na(testtype), "Survey With Goals", testtype),
testid = as.character(testid)) %>%
filter(testtype == "Survey With Goals",
growthmeasureyn == 'TRUE') %>%
mutate(teststartdate = as.character(ymd(teststartdate)),
testid = if_else(is.na(testid),
paste(studentid, measurementscale, teststartdate, testdurationminutes, sep = "_"),
testid))
cat("Create summary objects")
map_sum_15 <- summary(map_mv_15$growth_df)
cat("Separate combined table into assessment results and roster")
map_sep <- separate_cdf(map_cdf_3, district_name = "KIPP Chicago")
separate_cdf <- function(combinded_cdf, district_name = "Not provided"){
ar_names <- names(ex_CombinedAssessmentResults) %>% tolower
stu_names <- names(ex_CombinedStudentsBySchool) %>% tolower
if (!"districtname" %in% tolower(names(combinded_cdf))) {
combinded_cdf <- combinded_cdf %>% mutate_(districtname = ~district_name)
}
ar_names <- names(ex_CombinedAssessmentResults) %>% tolower
stu_names <- names(ex_CombinedStudentsBySchool) %>% tolower
if (!"districtname" %in% tolower(names(combinded_cdf))) {
combinded_cdf <- combinded_cdf %>% mutate_(districtname = ~district_name)
}
roster<-combinded_cdf %>%
select_(.dots = stu_names) %>%
unique
cdf<-combinded_cdf %>% select(-studentlastname:-studentfirstname,
-studentmi:-studentgender,
-grade) %>%
mutate(testid=as.character(testid))
out <- list(cdf = cdf,
roster = roster)
}
cat("Separate combined table into assessment results and roster")
map_sep <- separate_cdf(map_cdf_3, district_name = "KIPP Chicago")
cat("Create mapvizieR object for 2015 norms")
map_sep$cdf <- map_sep$cdf %>%
mutate(goal7name = NA,
goal7ritscore = NA,
goal7stderr = NA,
goal7range = NA,
goal7adjective = NA,
goal8name = NA,
goal8ritscore = NA,
goal8stderr = NA,
goal8range = NA,
goal8adjective = NA,
projectedproficiencystudy3 = NA,
projectedproficiencylevel3 = NA) %>%
distinct()
map_sep$roster <- map_sep$roster %>% distinct()
map_mv_15 <-
mapvizieR(
cdf = map_sep$cdf,
roster = map_sep$roster,
include_unsanctioned_windows = TRUE,
verbose = TRUE
)
cat("Create summary objects")
map_sum_15 <- summary(map_mv_15$growth_df)
cat("Get current student roster from PowerSchool")
current_ps <- get_powerschool("students") %>%
select(studentid = student_number,
schoolid,
grade_level,
enroll_status) %>%
filter(enroll_status == 0) %>%
collect()
names(current_ps) <- tolower(names(current_ps))
cat("calculate students per grade")
student_enrollment <- current_ps %>%
group_by(schoolid, grade_level) %>%
summarize(N = n()) %>%
inner_join(schools, by = "schoolid") %>%
rename(grade = grade_level)
schools <- data_frame(schoolid = c(78102, 7810, 400146, 400163, 4001802, 400180),
schoolname = c("Ascend Primary", "Ascend Middle", "Academy", "Bloom", "One Primary", "One Academy"),
schoolabbreviation =c("KAP", "KAMS", "KAC", "KBCP", "KOP", "KOA"))
student_enrollment <- current_ps %>%
group_by(schoolid, grade_level) %>%
summarize(N = n()) %>%
inner_join(schools, by = "schoolid") %>%
rename(grade = grade_level)
cat("Calculate current students tested")
current_map_term <- map_mv_15$cdf %>%
ungroup() %>%
filter(teststartdate == max(teststartdate)) %>%
select(termname) %>%
unique() %>%
.[[1]]
tested <- map_mv_15$cdf %>%
filter(termname == current_map_term,
growthmeasureyn) %>%
group_by(schoolname, grade, measurementscale) %>%
summarize(n_tested = n()) %>%
mutate(schoolabbreviation = abbrev(schoolname, list(old = "KAPS", new = "KAP"))) %>%
ungroup() %>%
select(schoolabbreviation, grade, measurementscale, n_tested)
student_enrollment_tested <-
tested %>%
left_join(student_enrollment,
by = c("schoolabbreviation", "grade")) %>%
select(School = schoolabbreviation,
Grade = grade,
Subject = measurementscale,
Enrolled = N,
Tested = n_tested
) %>%
mutate(Percent = Tested/Enrolled)
cat("Getting historical scores")
hist_scores <- map_mv_15$cdf %>%
ungroup() %>%
inner_join(map_mv_15$roster %>%
ungroup() %>%
filter(implicit_cohort >= 2021) %>%
select(termname, studentid, studentlastname,
studentfirstname, implicit_cohort, year_in_district),
by = c("termname",  "studentid")) %>%
inner_join(current_ps %>%
select(studentid),
by = "studentid") %>%
mutate(SY = sprintf("%s-%s", map_year_academic, map_year_academic + 1),
School = mapvizieR::abbrev(schoolname, list(old = "KAPS", new = "KAP")),
tested_at_kipp = as.logical(testedatkipp)) %>%
select(SY,
School,
Grade = grade,
Season = fallwinterspring,
Subject = measurementscale,
ID = studentid,
"First Name" = studentfirstname,
"Last Name" = studentlastname,
"RIT Score" = testritscore,
"Percentile" = testpercentile,
"Date Taken" = teststartdate,
"Taken at KIPP?" = tested_at_kipp
) %>%
arrange(desc(SY), Season, Subject, School, Grade)
student_enrollment_tested
map_mv_15$cdf %>%
ungroup() %>%
inner_join(map_mv_15$roster %>%
ungroup() %>%
filter(implicit_cohort >= 2021) %>%
select(termname, studentid, studentlastname,
studentfirstname, implicit_cohort, year_in_district),
by = c("termname",  "studentid"))
hist_scores <- map_mv_15$cdf %>%
ungroup() %>%
inner_join(map_mv_15$roster %>%
ungroup() %>%
filter(implicit_cohort >= 2022) %>%
select(termname, studentid, studentlastname,
studentfirstname, implicit_cohort, year_in_district),
by = c("termname",  "studentid"))
map_mv_15$cdf
map_mv_15$roster %>%
ungroup() %>%
filter(implicit_cohort >= 2022)
map_mv_15$cdf %>%
ungroup() %>%
inner_join(map_mv_15$roster %>%
ungroup() %>%
filter(implicit_cohort >= 2022) %>%
select(termname, studentid, studentlastname,
studentfirstname, implicit_cohort, year_in_district),
by = c("termname",  "studentid"))
map_mv_15$cdf %>%
ungroup()
map_mv_15$cdf
map_mv_15$cdf %>%
ungroup()
map_mv_15$roster %>%
ungroup()
map_mv_15$cdf %>%
ungroup()
map_mv_15$cdf %>%
ungroup() %>% ungroup()
map_mv_15$cdf %>%
ungroup() %>% as_tibble()
map_mv_15$cdf %>%
ungroup() %>% as_tibble() %>%
inner_join(map_mv_15$roster %>%
ungroup() %>%
filter(implicit_cohort >= 2022) %>%
select(termname, studentid, studentlastname,
studentfirstname, implicit_cohort, year_in_district),
by = c("termname",  "studentid"))
hist_scores <- map_mv_15$cdf %>%
ungroup() %>%
as_tibble() %>% # fixes grouping issue (Groups = [?], which is not the same as non groups)
inner_join(map_mv_15$roster %>%
ungroup() %>%
filter(implicit_cohort >= 2022) %>%
select(termname, studentid, studentlastname,
studentfirstname, implicit_cohort, year_in_district),
by = c("termname",  "studentid")) %>%
inner_join(current_ps %>%
select(studentid),
by = "studentid") %>%
mutate(SY = sprintf("%s-%s", map_year_academic, map_year_academic + 1),
School = mapvizieR::abbrev(schoolname, list(old = "KAPS", new = "KAP")),
tested_at_kipp = as.logical(testedatkipp)) %>%
select(SY,
School,
Grade = grade,
Season = fallwinterspring,
Subject = measurementscale,
ID = studentid,
"First Name" = studentfirstname,
"Last Name" = studentlastname,
"RIT Score" = testritscore,
"Percentile" = testpercentile,
"Date Taken" = teststartdate,
"Taken at KIPP?" = tested_at_kipp
) %>%
arrange(desc(SY), Season, Subject, School, Grade)
library(googleCloudStorageR)
install.packages("googleCloudStorageR")
library(googleCloudStorageR)
cat("Saving data to GCS.")
gcs_global_bucket("idea_map")
gcs_results <- gcs_save(#map_mv_15,
map_sum_15,
current_ps,
current_map_term,
student_enrollment_tested,
hist_scores,
file = "map.rda")
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
Sys.getenv("GCS_AUTH_FILE")
Sys.getenv("BQ_AUTH_FILE")
Sys.getenv("BQ_PROJECT")
Sys.getenv("FIRST_DAY")
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
plumb(file='plumber.R')$run()
Sys.getenv("GCS_AUTH_FILE")
Sys.getenv("BQ_AUTH_FILE")
Sys.getenv("BQ_PROJECT")
data(ex_CombinedAssessmentResults, package = 'mapvizieR')
data(ex_CombinedStudentsBySchool, package = 'mapvizieR')
ar_names <- names(ex_CombinedAssessmentResults) %>% tolower
stu_names <- names(ex_CombinedStudentsBySchool) %>% tolower
View(map_cdf)
View(map_cdf_2)
map_cdf_3 <- map_cdf_2 %>%
mutate(testtype = if_else(is.na(testtype), "Survey With Goals", testtype),
testid = as.character(testid)) %>%
filter(testtype == "Survey With Goals",
growthmeasureyn == 'TRUE') %>%
mutate(teststartdate = as.character(ymd(teststartdate)),
testid = if_else(is.na(testid),
paste(studentid, measurementscale, teststartdate, testdurationminutes, sep = "_"),
testid),
schoolname = if_else(str_detect(schoolname, "Create"),
"KIPP Academy Chicago",
schoolname)
)
View(map_cdf_3)
install.packages("forcats")
install.packages("janitor")
gcs_auth_file
